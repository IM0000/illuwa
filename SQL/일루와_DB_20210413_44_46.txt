-- 테이블 순서는 관계를 고려하여 한 번에 실행해도 에러가 발생하지 않게 정렬되었습니다.

-- USERS Table Create SQL
CREATE TABLE USERS
(
    USER_NO           NUMBER          NOT NULL, 
    USER_ID           VARCHAR2(20)    NOT NULL, 
    USER_PW           VARCHAR2(20)    NOT NULL, 
    USER_NAME         VARCHAR2(20)    NOT NULL, 
    USER_GENDER       VARCHAR2(20)    NOT NULL, 
    USER_NICK         VARCHAR2(20)    NOT NULL, 
    USER_BIRTHDATE    VARCHAR2(20)    NOT NULL, 
    USER_EMAIL        VARCHAR2(50)    NOT NULL, 
    USER_PHONE        VARCHAR2(20)    NOT NULL, 
    USER_GRADE        NUMBER          NOT NULL, 
    CONSTRAINT PK_USER PRIMARY KEY (USER_NO)
)
/

CREATE SEQUENCE USERS_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER USERS_AI_TRG
BEFORE INSERT ON USERS 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT USERS_SEQ.NEXTVAL
    INTO :NEW.USER_NO
    FROM DUAL;
END;
/

--DROP TRIGGER USERS_AI_TRG;
/

--DROP SEQUENCE USERS_SEQ;
/


-- USERS Table Create SQL
CREATE TABLE ROOM
(
    ROOM_NO                  NUMBER            NOT NULL, 
    USER_NO                  NUMBER            NOT NULL, 
    ROOM_NAME                VARCHAR2(20)      NOT NULL, 
    ROOM_GUESTS              NUMBER            NOT NULL, 
    ROOM_PRICE               NUMBER            NOT NULL, 
    ROOM_BEDROOM             NUMBER            NOT NULL, 
    ROOM_BED                 NUMBER            NOT NULL, 
    ROOM_ADMIN_CHECK         VARCHAR2(1)       NOT NULL, 
    ROOM_DESC                VARCHAR2(4000)    NOT NULL, 
    ROOM_BATHROOM            NUMBER            NOT NULL, 
    ROOM_TYPE                VARCHAR2(20)      NOT NULL, 
    ROOM_ROAD_ADDRESS        VARCHAR2(200)     NOT NULL, 
    ROOM_DETAILED_ADDRESS    VARCHAR2(200)     NOT NULL, 
    CONSTRAINT PK_ROOM PRIMARY KEY (ROOM_NO)
)
/

CREATE SEQUENCE ROOM_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER ROOM_AI_TRG
BEFORE INSERT ON ROOM 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT ROOM_SEQ.NEXTVAL
    INTO :NEW.ROOM_NO
    FROM DUAL;
END;
/

--DROP TRIGGER ROOM_AI_TRG;
/

--DROP SEQUENCE ROOM_SEQ;
/

ALTER TABLE ROOM
    ADD CONSTRAINT FK_ROOM_USER_NO_USERS_USER_NO FOREIGN KEY (USER_NO)
        REFERENCES USERS (USER_NO)
/


-- USERS Table Create SQL
CREATE TABLE BOARDS
(
    BOARD_NO             NUMBER           NOT NULL, 
    BOARD_TITLE          VARCHAR2(100)    NOT NULL, 
    BOARD_CONTENT        CLOB             NOT NULL, 
    BOARD_CREATE_DATE    DATE             NOT NULL, 
    BOARD_TYPE           NUMBER           NOT NULL, 
    USER_NO              NUMBER           NOT NULL, 
    CONSTRAINT PK_BOARD PRIMARY KEY (BOARD_NO)
)
/


ALTER TABLE BOARDS
    ADD CONSTRAINT FK_BOARDS_USER_NO_USERS_USER_N FOREIGN KEY (USER_NO)
        REFERENCES USERS (USER_NO)
/


-- USERS Table Create SQL
CREATE TABLE FACILITY
(
    FACILITY_NO      NUMBER          NOT NULL, 
    FACILITY_NAME    VARCHAR2(50)    NOT NULL, 
    CONSTRAINT PK_FACILITY PRIMARY KEY (FACILITY_NO)
)
/

CREATE SEQUENCE FACILITY_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER FACILITY_AI_TRG
BEFORE INSERT ON FACILITY 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT FACILITY_SEQ.NEXTVAL
    INTO :NEW.FACILITY_NO
    FROM DUAL;
END;
/

--DROP TRIGGER FACILITY_AI_TRG;
/

--DROP SEQUENCE FACILITY_SEQ;
/


-- USERS Table Create SQL
CREATE TABLE FILTER
(
    FILTER_NO      NUMBER          NOT NULL, 
    FILTER_NAME    VARCHAR2(20)    NOT NULL, 
    CONSTRAINT PK_FILTER PRIMARY KEY (FILTER_NO)
)
/

CREATE SEQUENCE FILTER_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER FILTER_AI_TRG
BEFORE INSERT ON FILTER 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT FILTER_SEQ.NEXTVAL
    INTO :NEW.FILTER_NO
    FROM DUAL;
END;
/

--DROP TRIGGER FILTER_AI_TRG;
/

--DROP SEQUENCE FILTER_SEQ;
/


-- USERS Table Create SQL
CREATE TABLE RESTAURANT
(
    RES_NO                  NUMBER           NOT NULL, 
    RES_NAME                VARCHAR2(50)     NOT NULL, 
    RES_PHONE               VARCHAR2(20)     NOT NULL, 
    RES_TIME                VARCHAR2(300)    NOT NULL, 
    RES_PARKING             VARCHAR2(1)      NOT NULL, 
    RES_ROAD_ADDRESS        VARCHAR2(200)    NOT NULL, 
    RES_DETAILED_ADDRESS    VARCHAR2(200)    NOT NULL, 
    CONSTRAINT PK_RESTAURANT PRIMARY KEY (RES_NO)
)
/

CREATE SEQUENCE RESTAURANT_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER RESTAURANT_AI_TRG
BEFORE INSERT ON RESTAURANT 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT RESTAURANT_SEQ.NEXTVAL
    INTO :NEW.RES_NO
    FROM DUAL;
END;
/

--DROP TRIGGER RESTAURANT_AI_TRG;
/

--DROP SEQUENCE RESTAURANT_SEQ;
/

COMMENT ON TABLE RESTAURANT IS '추천맛집'
/

COMMENT ON COLUMN RESTAURANT.RES_NO IS '추천맛집번호'
/

COMMENT ON COLUMN RESTAURANT.RES_NAME IS '가게이름'
/

COMMENT ON COLUMN RESTAURANT.RES_PHONE IS '연락처'
/

COMMENT ON COLUMN RESTAURANT.RES_TIME IS '영업시간'
/

COMMENT ON COLUMN RESTAURANT.RES_PARKING IS 'CHECK res_parking IN(Y, N)'
/

COMMENT ON COLUMN RESTAURANT.RES_ROAD_ADDRESS IS '도로명주소'
/

COMMENT ON COLUMN RESTAURANT.RES_DETAILED_ADDRESS IS '상세주소'
/


-- USERS Table Create SQL
CREATE TABLE COMMENT
(
    COMMENT_NO             NUMBER           NOT NULL, 
    COMMENT_CREATE_DATE    DATE             NOT NULL, 
    COMMENT_CONTENT        VARCHAR2(500)    NOT NULL, 
    BOARD_NO               NUMBER           NOT NULL, 
    USER_NO                NUMBER           NOT NULL, 
    CONSTRAINT PK_COMMENT PRIMARY KEY (COMMENT_NO)
)
/

COMMENT ON TABLE COMMENT IS '댓글'
/

COMMENT ON COLUMN COMMENT.COMMENT_NO IS '댓글번호'
/

COMMENT ON COLUMN COMMENT.COMMENT_CREATE_DATE IS 'DEFAULT sysdate'
/

COMMENT ON COLUMN COMMENT.COMMENT_CONTENT IS '내용'
/

COMMENT ON COLUMN COMMENT.BOARD_NO IS '글번호'
/

COMMENT ON COLUMN COMMENT.USER_NO IS '회원번호'
/

ALTER TABLE COMMENT
    ADD CONSTRAINT FK_COMMENT_BOARD_NO_BOARDS_BOA FOREIGN KEY (BOARD_NO)
        REFERENCES BOARDS (BOARD_NO)
/

ALTER TABLE COMMENT
    ADD CONSTRAINT FK_COMMENT_USER_NO_USERS_USER_ FOREIGN KEY (USER_NO)
        REFERENCES USERS (USER_NO)
/


-- USERS Table Create SQL
CREATE TABLE BOOKING
(
    BOOKING_NO          NUMBER           NOT NULL, 
    USER_NO             NUMBER           NOT NULL, 
    BOOKING_GUEST       NUMBER(2)        NOT NULL, 
    BOOKING_CHECKIN     DATE             NOT NULL, 
    BOOKING_CHECKOUT    DATE             NOT NULL, 
    BOOKING_STATUS      VARCHAR2(20)     NOT NULL, 
    BOOKING_MESSAGE     VARCHAR2(200)    NOT NULL, 
    ROOM_NO             NUMBER           NOT NULL, 
    CONSTRAINT PK_BOOKING PRIMARY KEY (BOOKING_NO)
)
/

CREATE SEQUENCE BOOKING_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER BOOKING_AI_TRG
BEFORE INSERT ON BOOKING 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT BOOKING_SEQ.NEXTVAL
    INTO :NEW.BOOKING_NO
    FROM DUAL;
END;
/

--DROP TRIGGER BOOKING_AI_TRG;
/

--DROP SEQUENCE BOOKING_SEQ;
/

COMMENT ON TABLE BOOKING IS '예약'
/

COMMENT ON COLUMN BOOKING.BOOKING_NO IS '예약번호'
/

COMMENT ON COLUMN BOOKING.USER_NO IS '회원번호'
/

COMMENT ON COLUMN BOOKING.BOOKING_GUEST IS '게스트 수'
/

COMMENT ON COLUMN BOOKING.BOOKING_CHECKIN IS '체크인'
/

COMMENT ON COLUMN BOOKING.BOOKING_CHECKOUT IS '체크아웃'
/

COMMENT ON COLUMN BOOKING.BOOKING_STATUS IS '예약상태'
/

COMMENT ON COLUMN BOOKING.BOOKING_MESSAGE IS '보낼메시지'
/

COMMENT ON COLUMN BOOKING.ROOM_NO IS '숙소번호'
/

ALTER TABLE BOOKING
    ADD CONSTRAINT FK_BOOKING_USER_NO_USERS_USER_ FOREIGN KEY (USER_NO)
        REFERENCES USERS (USER_NO)
/

ALTER TABLE BOOKING
    ADD CONSTRAINT FK_BOOKING_ROOM_NO_ROOM_ROOM_N FOREIGN KEY (ROOM_NO)
        REFERENCES ROOM (ROOM_NO)
/


-- USERS Table Create SQL
CREATE TABLE BOOKMARK
(
    BOOKMARK_NO    NUMBER    NOT NULL, 
    USER_NO        NUMBER    NOT NULL, 
    ROOM_NO        NUMBER    NOT NULL, 
    CONSTRAINT PK_BOOKMARK PRIMARY KEY (BOOKMARK_NO)
)
/

COMMENT ON TABLE BOOKMARK IS '북마크'
/

COMMENT ON COLUMN BOOKMARK.BOOKMARK_NO IS '북마크 번호'
/

COMMENT ON COLUMN BOOKMARK.USER_NO IS '회원번호'
/

COMMENT ON COLUMN BOOKMARK.ROOM_NO IS '숙소번호'
/

ALTER TABLE BOOKMARK
    ADD CONSTRAINT FK_BOOKMARK_USER_NO_USERS_USER FOREIGN KEY (USER_NO)
        REFERENCES USERS (USER_NO)
/

ALTER TABLE BOOKMARK
    ADD CONSTRAINT FK_BOOKMARK_ROOM_NO_ROOM_ROOM_ FOREIGN KEY (ROOM_NO)
        REFERENCES ROOM (ROOM_NO)
/


-- USERS Table Create SQL
CREATE TABLE ROOM_IMG
(
    ROOM_IMG_NO          NUMBER          NOT NULL, 
    ROOM_NO              NUMBER          NOT NULL, 
    ROOM_IMG_FILENAME    VARCHAR2(50)    NOT NULL, 
    CONSTRAINT PK_ROOM_IMG PRIMARY KEY (ROOM_IMG_NO)
)
/

CREATE SEQUENCE ROOM_IMG_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER ROOM_IMG_AI_TRG
BEFORE INSERT ON ROOM_IMG 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT ROOM_IMG_SEQ.NEXTVAL
    INTO :NEW.ROOM_IMG_NO
    FROM DUAL;
END;
/

--DROP TRIGGER ROOM_IMG_AI_TRG;
/

--DROP SEQUENCE ROOM_IMG_SEQ;
/

COMMENT ON TABLE ROOM_IMG IS '숙소이미지'
/

COMMENT ON COLUMN ROOM_IMG.ROOM_IMG_NO IS '숙소이미지번호'
/

COMMENT ON COLUMN ROOM_IMG.ROOM_NO IS '숙소번호'
/

COMMENT ON COLUMN ROOM_IMG.ROOM_IMG_FILENAME IS '파일명'
/

ALTER TABLE ROOM_IMG
    ADD CONSTRAINT FK_ROOM_IMG_ROOM_NO_ROOM_ROOM_ FOREIGN KEY (ROOM_NO)
        REFERENCES ROOM (ROOM_NO)
/


-- USERS Table Create SQL
CREATE TABLE ROOM_FACILITY_MAPPING
(
    ROOM_NO        NUMBER    NOT NULL, 
    FACILITY_NO    NUMBER    NOT NULL, 
    CONSTRAINT PK_ROOM_FACILITY_MAPPING PRIMARY KEY (ROOM_NO, FACILITY_NO)
)
/

COMMENT ON TABLE ROOM_FACILITY_MAPPING IS '숙소_편의시설 매핑테이블'
/

COMMENT ON COLUMN ROOM_FACILITY_MAPPING.ROOM_NO IS '숙소번호'
/

COMMENT ON COLUMN ROOM_FACILITY_MAPPING.FACILITY_NO IS '편의시설 번호'
/

ALTER TABLE ROOM_FACILITY_MAPPING
    ADD CONSTRAINT FK_ROOM_FACILITY_MAPPING_FACIL FOREIGN KEY (FACILITY_NO)
        REFERENCES FACILITY (FACILITY_NO)
/

ALTER TABLE ROOM_FACILITY_MAPPING
    ADD CONSTRAINT FK_ROOM_FACILITY_MAPPING_ROOM_ FOREIGN KEY (ROOM_NO)
        REFERENCES ROOM (ROOM_NO)
/


-- USERS Table Create SQL
CREATE TABLE REVIEW
(
    RE_NO         NUMBER           NOT NULL, 
    USER_NO       NUMBER           NOT NULL, 
    ROOM_NO       NUMBER           NOT NULL, 
    RE_CONTENT    VARCHAR2(500)    NOT NULL, 
    RE_DATE       DATE             NOT NULL, 
    RE_STAR       VARCHAR2(20)     NOT NULL, 
    CONSTRAINT PK_REVIEW PRIMARY KEY (RE_NO)
)
/

CREATE SEQUENCE REVIEW_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER REVIEW_AI_TRG
BEFORE INSERT ON REVIEW 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT REVIEW_SEQ.NEXTVAL
    INTO :NEW.RE_NO
    FROM DUAL;
END;
/

--DROP TRIGGER REVIEW_AI_TRG;
/

--DROP SEQUENCE REVIEW_SEQ;
/

COMMENT ON TABLE REVIEW IS '리뷰'
/

COMMENT ON COLUMN REVIEW.RE_NO IS '리뷰번호'
/

COMMENT ON COLUMN REVIEW.USER_NO IS '회원번호'
/

COMMENT ON COLUMN REVIEW.ROOM_NO IS '숙소번호'
/

COMMENT ON COLUMN REVIEW.RE_CONTENT IS '내용'
/

COMMENT ON COLUMN REVIEW.RE_DATE IS 'DEFAULT sysdate'
/

COMMENT ON COLUMN REVIEW.RE_STAR IS '별점'
/

ALTER TABLE REVIEW
    ADD CONSTRAINT FK_REVIEW_USER_NO_USERS_USER_N FOREIGN KEY (USER_NO)
        REFERENCES USERS (USER_NO)
/

ALTER TABLE REVIEW
    ADD CONSTRAINT FK_REVIEW_ROOM_NO_ROOM_ROOM_NO FOREIGN KEY (ROOM_NO)
        REFERENCES ROOM (ROOM_NO)
/


-- USERS Table Create SQL
CREATE TABLE RES_FILTER_MAPPING
(
    FILTER_NO    NUMBER    NOT NULL, 
    RES_NO       NUMBER    NOT NULL, 
    CONSTRAINT PK_RES_FILTER_MAPPING PRIMARY KEY (FILTER_NO, RES_NO)
)
/

COMMENT ON COLUMN RES_FILTER_MAPPING.FILTER_NO IS '필터번호'
/

COMMENT ON COLUMN RES_FILTER_MAPPING.RES_NO IS '추천맛집번호'
/

ALTER TABLE RES_FILTER_MAPPING
    ADD CONSTRAINT FK_RES_FILTER_MAPPING_FILTER_N FOREIGN KEY (FILTER_NO)
        REFERENCES FILTER (FILTER_NO)
/

ALTER TABLE RES_FILTER_MAPPING
    ADD CONSTRAINT FK_RES_FILTER_MAPPING_RES_NO_R FOREIGN KEY (RES_NO)
        REFERENCES RESTAURANT (RES_NO)
/


